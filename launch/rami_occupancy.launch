<launch>
    <!-- Configurable arguments -->
    <arg name="robot_name" default="minigirona"/>

    <arg name="enable_keyboard" default="false"/>
    <arg name="enable_joystick" default="true"/>
    <arg name="joystick_device" default="/dev/input/js0"/>
    <arg name="enable_gui" default="true"/>
    <arg name="enable_rviz" default="true"/>

    <!-- Simulation parameters -->
    <arg name="simulation_data" value="$(find minigirona_stonefish)/data"/>
    <arg name="scenario_description"
        value="$(find rami_competition)/scenario/rami_env.scn"/>
    <arg name="simulation_rate" value="100.0"/>
    <arg name="graphics_resolution" value="1440 900"/>
    <arg name="graphics_quality" value="low"/>

    <!-- Static transform -->
    <node name="world2ned" pkg="tf2_ros" type="static_transform_publisher"
        args="0 0 0 0 0 3.1415 world world_ned"/>

    <!-- Namespace with robot name -->
    <group ns="$(arg robot_name)">
        <!-- Architecture -->
        <include file="$(find minigirona_stonefish)/launch/core/minigirona_base.launch.core">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="enable_gui" value="$(arg enable_gui)"/>
        </include>

        <!-- keep the robot in place for simulation -->
        <rosparam param="controller/enable_thrusters">true</rosparam>

        <!-- Joystick -->
        <group if="$(arg enable_joystick)">
            <node name="joystick" pkg="joy" type="joy_node">
                <param name="dev" value="$(arg joystick_device)"/>
                <param name="dev_ff" value=""/>
                <param name="deadzone" value="0.05"/>
            </node>
            <node name="fx10_to_teleoperation" pkg="cola2_control"
                type="logitech_fx10_to_teleoperation_node.py"/>
        </group>

        <!-- Load robot description -->
        <param name="robot_description"
            command="$(find xacro)/xacro '$(find minigirona_description)/urdf/minig_alpha5.urdf.xacro' 
                        robot_namespace:=$(arg robot_name)"/>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            output="screen"/>

        <!-- Run Simulator -->
        <node name="stonefish_simulator" pkg="stonefish_ros" type="parsed_simulator"
            args="$(arg simulation_data) $(arg scenario_description)
                  $(arg simulation_rate) $(arg graphics_resolution) 
                  $(arg graphics_quality)">
            <remap from="alpha5/joint_states" to="joint_states"/>
        </node>     

        <group ns="alpha5">
            <!-- Load ros-control parameters -->
            <rosparam command="load"
                file="$(find minigirona_stonefish)/config/alpha5_ros_control.yaml"/>
            <!-- Load the controllers -->
            <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
                args="joint_state_controller joint_trajectory_controller"/>
        </group>

    </group>

    <!-- Stonefish/COLA2 message translator -->
    <node name="translator" pkg="minigirona_stonefish" type="minigirona_stonefish_node">
        <remap from="/translator/stonefish_dvl" to="/$(arg robot_name)/navigator/dvl_sim"/>
        <remap from="/translator/cola2_dvl" to="/$(arg robot_name)/navigator/dvl"/>
        <remap from="/translator/stonefish_thruster_setpoints" to="/$(arg robot_name)/controller/thruster_setpoints_sim"/>
        <remap from="/translator/cola2_thruster_setpoints" to="/$(arg robot_name)/controller/thruster_setpoints"/>
    </node>

    <!-- RViz -->
    <node if="$(arg enable_rviz)" pkg="rviz" type="rviz" name="rviz"
        args="-d $(find minigirona_stonefish)/config/view.rviz"/>

    <node pkg="turtlebot_online_path_planning" type="laser_scan_to_point_cloud_node.py" name="laser_scan_to_point_cloud_node" output="screen"/>

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen">
        <remap from="cloud_in" to="/minigirona/navigator/cloud_in" />
        <param name="frame_id" value="map" />
        <param name="resolution" value="0.05" />
        <param name="publish_2d_map" value="true" />
    </node>


    <!-- <node name="world_ned_to_odom" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 world_ned /minigirona/navigator/odometry"/> -->
    <node name="odom_to_world_ned" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 /minigirona/navigator/odometry world_ned"/>

    <!-- In your launch file -->
    <param name="/octomap_server/frame_id" value="map"/>  <!-- OctoMap publishes in map frame -->
    <param name="/octomap_server/base_frame_id" value="/minigirona/navigator/odometry"/>

    <!-- Static transform (if no SLAM) -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom" 
          args="0 0 0 0 0 0 map /minigirona/navigator/odometry 100"/> -->

    <node pkg="tf" type="static_transform_publisher" name="map_to_world_ned" 
          args="0 0 0 0 0 0 map world_ned 100"/>


    <!-- RRT PLanner node -->
    <!-- <node pkg="rami_competition" type="planning_node.py" name="ompl_planner_node" output="screen"/> -->
</launch>
